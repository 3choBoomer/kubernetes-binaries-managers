#!/usr/bin/env bash

load "lib/create-kind-cluster/load"

load "lib/bats-support/load"
load "lib/bats-assert/load"

function setup() {
  if [[ ! -e ./bin/kbenv  ]]
  then
    make build
  elif [[ ! -e ./bin/helmenv ]]
  then
    make build
  elif [[ ! -e ./bin/kubectl-wrapper ]]
  then
    make build
  elif [[ ! -e ./bin/helm-wrapper ]]
  then
    make build
  fi
  export PATH=$PATH:/home/$(whoami)/.bin/
  export PATH=$PATH:$(pwd)/bin/
}

@test "apply" {
  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    teardownCallback=$(create_cluster)
  fi

  run ./bin/kbenv install 1.18.1
  run ./bin/kubectl-wrapper create deployment hello-node --image=k8s.gcr.io/echoserver:1.4
  assert_success

  pod=$(./bin/kubectl-wrapper get pod -l app=hello-node -o=custom-columns=:.metadata.name | tail -n1)
  run ./bin/kubectl-wrapper rollout status deploy hello-node
  run ./bin/kubectl-wrapper exec "$pod" -- ls
  assert_success
  refute_output --partial "Unable to use a TTY"

  run ./bin/kbenv uninstall 1.18.1

  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    eval "$teardownCallback"
  fi
}

@test "kubectl auto" {
  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    teardownCallback=$(create_cluster)
  fi

  run ./bin/kbenv use auto
  assert_success
  assert_output --partial "Done! Using auto version."

  run ./bin/kubectl-wrapper get pod --all-namespaces
  assert_success
  assert_output --partial "coredns"

  if [[ "$KIND_CREATE_CLUSTER" == "true" ]]
  then
    eval "$teardownCallback"
  fi
}
